require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::BrokersController do

  # This should return the minimal set of attributes required to create a valid
  # Admin::Broker. As you add validations to Admin::Broker, be sure to
  # adjust the attributes here as well.
#  let(:valid_attributes) { { "name" => "MyString" } }

  ## This should return the minimal set of values that should be in the session
  ## in order to pass any filters (e.g. authentication) defined in
  ## Admin::BrokersController. Be sure to keep this updated too.
  #let(:valid_session) { {} }

  #describe "GET index" do
    #it "assigns all admin_brokers as @admin_brokers" do
      #broker = Admin::Broker.create! valid_attributes
      #get :index, {}, valid_session
      #assigns(:admin_brokers).should eq([broker])
    #end
  #end

  #describe "GET show" do
    #it "assigns the requested admin_broker as @admin_broker" do
      #broker = Admin::Broker.create! valid_attributes
      #get :show, {:id => broker.to_param}, valid_session
      #assigns(:admin_broker).should eq(broker)
    #end
  #end

  #describe "GET new" do
    #it "assigns a new admin_broker as @admin_broker" do
      #get :new, {}, valid_session
      #assigns(:admin_broker).should be_a_new(Admin::Broker)
    #end
  #end

  #describe "GET edit" do
    #it "assigns the requested admin_broker as @admin_broker" do
      #broker = Admin::Broker.create! valid_attributes
      #get :edit, {:id => broker.to_param}, valid_session
      #assigns(:admin_broker).should eq(broker)
    #end
  #end

  #describe "POST create" do
    #describe "with valid params" do
      #it "creates a new Admin::Broker" do
        #expect {
          #post :create, {:admin_broker => valid_attributes}, valid_session
        #}.to change(Admin::Broker, :count).by(1)
      #end

      #it "assigns a newly created admin_broker as @admin_broker" do
        #post :create, {:admin_broker => valid_attributes}, valid_session
        #assigns(:admin_broker).should be_a(Admin::Broker)
        #assigns(:admin_broker).should be_persisted
      #end

      #it "redirects to the created admin_broker" do
        #post :create, {:admin_broker => valid_attributes}, valid_session
        #response.should redirect_to(Admin::Broker.last)
      #end
    #end

    #describe "with invalid params" do
      #it "assigns a newly created but unsaved admin_broker as @admin_broker" do
        ## Trigger the behavior that occurs when invalid params are submitted
        #Admin::Broker.any_instance.stub(:save).and_return(false)
        #post :create, {:admin_broker => { "name" => "invalid value" }}, valid_session
        #assigns(:admin_broker).should be_a_new(Admin::Broker)
      #end

      #it "re-renders the 'new' template" do
        ## Trigger the behavior that occurs when invalid params are submitted
        #Admin::Broker.any_instance.stub(:save).and_return(false)
        #post :create, {:admin_broker => { "name" => "invalid value" }}, valid_session
        #response.should render_template("new")
      #end
    #end
  #end

  #describe "PUT update" do
    #describe "with valid params" do
      #it "updates the requested admin_broker" do
        #broker = Admin::Broker.create! valid_attributes
        ## Assuming there are no other admin_brokers in the database, this
        ## specifies that the Admin::Broker created on the previous line
        ## receives the :update_attributes message with whatever params are
        ## submitted in the request.
        #Admin::Broker.any_instance.should_receive(:update).with({ "name" => "MyString" })
        #put :update, {:id => broker.to_param, :admin_broker => { "name" => "MyString" }}, valid_session
      #end

      #it "assigns the requested admin_broker as @admin_broker" do
        #broker = Admin::Broker.create! valid_attributes
        #put :update, {:id => broker.to_param, :admin_broker => valid_attributes}, valid_session
        #assigns(:admin_broker).should eq(broker)
      #end

      #it "redirects to the admin_broker" do
        #broker = Admin::Broker.create! valid_attributes
        #put :update, {:id => broker.to_param, :admin_broker => valid_attributes}, valid_session
        #response.should redirect_to(broker)
      #end
    #end

    #describe "with invalid params" do
      #it "assigns the admin_broker as @admin_broker" do
        #broker = Admin::Broker.create! valid_attributes
        ## Trigger the behavior that occurs when invalid params are submitted
        #Admin::Broker.any_instance.stub(:save).and_return(false)
        #put :update, {:id => broker.to_param, :admin_broker => { "name" => "invalid value" }}, valid_session
        #assigns(:admin_broker).should eq(broker)
      #end

      #it "re-renders the 'edit' template" do
        #broker = Admin::Broker.create! valid_attributes
        ## Trigger the behavior that occurs when invalid params are submitted
        #Admin::Broker.any_instance.stub(:save).and_return(false)
        #put :update, {:id => broker.to_param, :admin_broker => { "name" => "invalid value" }}, valid_session
        #response.should render_template("edit")
      #end
    #end
  #end

  #describe "DELETE destroy" do
    #it "destroys the requested admin_broker" do
      #broker = Admin::Broker.create! valid_attributes
      #expect {
        #delete :destroy, {:id => broker.to_param}, valid_session
      #}.to change(Admin::Broker, :count).by(-1)
    #end

    #it "redirects to the admin_brokers list" do
      #broker = Admin::Broker.create! valid_attributes
      #delete :destroy, {:id => broker.to_param}, valid_session
      #response.should redirect_to(admin_brokers_url)
    #end
  #end

end
